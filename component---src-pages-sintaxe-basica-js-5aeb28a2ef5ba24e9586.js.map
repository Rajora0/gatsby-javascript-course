{"version":3,"file":"component---src-pages-sintaxe-basica-js-5aeb28a2ef5ba24e9586.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/header.js","webpack://gatsby-starter-default/./src/components/layout.js","webpack://gatsby-starter-default/./src/components/seo.js","webpack://gatsby-starter-default/./src/pages/sintaxe-basica.js"],"sourcesContent":["import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport \"./header.css\" // Certifique-se de ter um arquivo CSS para o estilo do header\n\nconst Header = ({ siteTitle }) => (\n  <header className=\"animated-header\">\n    <div className=\"logo\">\n    </div>\n    <nav>\n      <ul>\n        <li><Link to=\"/\">Inicio</Link></li>\n        <li><Link to=\"/sobre\">Sobre</Link></li>\n        <li><Link to=\"/contact-section\">Contato</Link></li>\n      </ul>\n    </nav>\n  </header>\n)\n\nexport default Header","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata?.title || `Title`} />\n      <div\n        style={{\n          margin: `0 auto`,\n          maxWidth: `var(--size-content)`,\n          padding: `var(--size-gutter)`,\n        }}\n      >\n        <main>{children}</main>\n        <footer\n          style={{\n            marginTop: `var(--space-5)`,\n            fontSize: `var(--font-sm)`,\n          }}\n        >\n\n        </footer>\n      </div>\n    </>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description, title, children }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst SyntaxBasic = () => (\n  <Layout>\n    <h1>Sintaxe Básica em JavaScript</h1>\n    <p>Nesta seção, exploraremos os conceitos básicos da sintaxe JavaScript. Vamos começar com variáveis, tipos de dados e operadores.</p>\n\n    <h2>Variáveis, Tipos de Dados e Operadores</h2>\n    <p>Em JavaScript, as variáveis são usadas para armazenar valores. Os tipos de dados incluem números, strings, booleanos, objetos, entre outros.</p>\n    \n    <h2>Tipos de Dados em JavaScript</h2>\n    <p>JavaScript possui diversos tipos de dados que são fundamentais para a manipulação de informações. Vamos explorar alguns deles:</p>\n\n    <h3>1. Números (Number):</h3>\n    <p>Representa valores numéricos, como inteiros ou números de ponto flutuante.</p>\n\n    <h3>2. Strings:</h3>\n    <p>Sequências de caracteres. Podem ser definidas com aspas simples ou duplas.</p>\n\n    <h3>3. Booleanos (Boolean):</h3>\n    <p>Representa um valor verdadeiro (`true`) ou falso (`false`). Usado em lógica condicional.</p>\n\n    <h3>4. Arrays:</h3>\n    <p>Coleção ordenada de valores, acessíveis por índice. Começa com índice zero.</p>\n\n    <h3>5. Objetos:</h3>\n    <p>Conjunto de pares chave-valor. Cada valor é acessado através de sua chave.</p>\n\n    <h3>6. Null e Undefined:</h3>\n    <p>`null` é usado para representar a ausência intencional de qualquer objeto de valor ou referência. `undefined` é usado para variáveis que não foram atribuídas.</p>\n\n    <h2>Operações em JavaScript</h2>\n    <p>JavaScript suporta uma variedade de operações que podem ser aplicadas a diferentes tipos de dados. Vamos explorar algumas das operações mais comuns:</p>\n\n    <h3>Operações Aritméticas:</h3>\n    <p>Realizam cálculos matemáticos. Exemplos incluem adição (+), subtração (-), multiplicação (*) e divisão (/).</p>\n\n    <h3>Operações de String:</h3>\n    <p>Strings podem ser concatenadas usando o operador de concatenação (+). Além disso, você pode acessar caracteres individuais em uma string usando a notação de colchetes.</p>\n\n    <h3>Operações de Comparação:</h3>\n    <p>Comparação de valores usando operadores como igual (==), estritamente igual (===), diferente (!=), estritamente diferente (!==), maior que (&gt;), menor que (&lt;), etc.</p>\n\n    <h3>Operadores Lógicos:</h3>\n    <p>Operadores lógicos, como AND (&amp;&amp;), OR (||) e NOT (!), são usados para combinar condições lógicas.</p>\n\n    <h3>Operações de Atribuição:</h3>\n    <p>O operador de atribuição (=) é usado para atribuir um valor a uma variável. Além disso, há operadores de atribuição combinados, como += e -=, que realizam uma operação e atribuem o resultado à variável.</p>\n\n    <h3>Operações Bitwise:</h3>\n    <p>Operações que manipulam os bits dos números, incluindo AND (&), OR (|), XOR (^), deslocamento para a esquerda (&lt;&lt;) e deslocamento para a direita (&gt;&gt;).</p>\n\n\n    <h2>Estruturas de Controle de Fluxo em JavaScript</h2>\n    <p>As estruturas de controle de fluxo permitem que você controle o fluxo de execução do seu código JavaScript. Vamos explorar as mais comuns:</p>\n\n    <h3>1. If-Else:</h3>\n    <p>A estrutura condicional mais básica. Executa um bloco de código se a condição especificada for verdadeira e outro bloco se for falsa. <Link to=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/if...else\">Referência do MDN</Link>.</p>\n\n    <h3>2. Switch:</h3>\n    <p>Usado para avaliar uma expressão contra múltiplos casos. Cada caso executa um bloco de código correspondente. <Link to=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/switch\">Referência do MDN</Link>.</p>\n\n    <h3>3. Loops (For, While, Do-While):</h3>\n    <p>Permite a execução repetida de um bloco de código enquanto a condição especificada for verdadeira. <Link to=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Loops_and_iteration\">Referência do MDN</Link>.</p>\n\n    <h3>4. Ternary Operator:</h3>\n    <p>Uma forma concisa de expressar uma instrução condicional. <Link to=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\">Referência do MDN</Link>.</p>\n\n    <h2>Orientação a Objetos em JavaScript</h2>\n    <p>JavaScript suporta programação orientada a objetos, permitindo a criação de objetos, classes, e herança. Vamos explorar os conceitos básicos:</p>\n\n    <h3>1. Objetos:</h3>\n    <p>Em JavaScript, um objeto é uma coleção de propriedades, onde cada propriedade tem um nome e um valor. Propriedades podem armazenar dados ou funções. <Link to=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Trabalhando_com_Objetos\">Referência do MDN</Link>.</p>\n\n    <h3>2. Funções Construtoras e Protótipos:</h3>\n    <p>Para criar objetos semelhantes, você pode usar funções construtoras e protótipos. As funções construtoras são chamadas usando a palavra-chave `new`. <Link to=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\">Referência do MDN</Link>.</p>\n\n    <h3>3. Classes:</h3>\n    <p>JavaScript introduziu classes na versão ECMAScript 2015 (ES6), simplificando a criação de objetos e herança. Classes são uma forma mais sintática de criar objetos e lidar com herança. <Link to=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Classes\">Referência do MDN</Link>.</p>\n\n    <h3>4. Herança em JavaScript:</h3>\n    <p>JavaScript suporta herança através do uso de protótipos. Objetos podem herdar propriedades e métodos de outros objetos. <Link to=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">Referência do MDN</Link>.</p>\n\n\n    <h2>Listas e Arrays em JavaScript</h2>\n    <p>Em JavaScript, arrays são estruturas de dados que armazenam coleções de elementos. Vamos explorar como criar, manipular e acessar elementos em arrays:</p>\n\n    <h3>1. Criando Arrays:</h3>\n    <p>Arrays podem ser criados de várias formas, incluindo a utilização de colchetes `[]` ou o construtor `Array()`. <Link to=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array\">Referência do MDN</Link>.</p>\n\n    <h3>2. Acessando Elementos:</h3>\n    <p>Os elementos em um array são acessados através de índices, que começam do zero. Utilize a notação de colchetes para acessar elementos específicos. <Link to=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Indexed_collections#Arrays\">Referência do MDN</Link>.</p>\n\n    <h3>3. Adicionando e Removendo Elementos:</h3>\n    <p>Utilize métodos como `push()`, `pop()`, `shift()`, e `unshift()` para adicionar ou remover elementos do início ou final de um array. <Link to=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Indexed_collections#Adicionando_elementos_em_um_array\">Referência do MDN</Link>.</p>\n\n    <h3>4. Iterando sobre Arrays:</h3>\n    <p>Existem várias formas de percorrer os elementos de um array, como utilizando `for`, `forEach()`, `map()`, `filter()`, e outros métodos de iteração. <Link to=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Indexed_collections#Iterando_uma_matriz\">Referência do MDN</Link>.</p>\n\n    <h2>Tratamento de Erros em JavaScript</h2>\n    <p>Em JavaScript, o tratamento de erros é uma prática essencial para lidar com situações imprevistas. Vamos explorar como você pode implementar tratamento de erros em seu código:</p>\n\n    <h3>1. Bloco Try-Catch:</h3>\n    <p>O bloco `try` permite que você teste um bloco de código quanto a erros. Se um erro ocorrer, ele será tratado no bloco `catch`. <Link to=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/try...catch\">Referência do MDN</Link>.</p>\n\n    <h3>2. Bloco Finally:</h3>\n    <p>O bloco `finally` é executado, quer ocorra um erro ou não, permitindo que você execute código de limpeza. <Link to=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/try...catch#finally\">Referência do MDN</Link>.</p>\n\n    <h3>3. Lançando Exceções:</h3>\n    <p>Você pode lançar suas próprias exceções usando a palavra-chave `throw`. Isso é útil para indicar erros específicos. <Link to=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/throw\">Referência do MDN</Link>.</p>\n\n    <h3>4. Objeto Error:</h3>\n    <p>O objeto `Error` é usado para representar erros em tempo de execução. Ele contém informações sobre o erro, como a mensagem de erro. <Link to=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Error\">Referência do MDN</Link>.</p>\n\n    <h2>Vídeo Tutorial</h2>\n    <div style={{ position: 'relative', paddingBottom: '56.25%', height: 0 }}>\n      <iframe \n        src=\"https://www.youtube.com/embed/-QWGj1D636w?si=tdKTSSLbQLoSe96k\" // Substitua este link pelo link de incorporação do seu vídeo\n        title=\"Tutorial JavaScript\"\n        style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}\n        frameborder=\"0\"\n        allowfullscreen\n      ></iframe>\n    </div>\n    {/* Links para outras seções ou páginas */}\n    <ul>\n\n    </ul>\n\n    <Link to=\"/\">Continue sua jornada de aprendizado no nosso site principal</Link>\n  </Layout>\n);\n\nexport const Head = () => <Seo title=\"Sintaxe Básica em JavaScript\" />\n\nexport default SyntaxBasic\n"],"names":["siteTitle","className","Link","to","children","data","useStaticQuery","site","siteMetadata","title","style","margin","maxWidth","padding","marginTop","fontSize","description","metaDescription","defaultTitle","name","content","property","author","Head","position","paddingBottom","height","src","top","left","width","frameborder","allowfullscreen"],"sourceRoot":""}